using Glitch9.Editor;
using Glitch9.Internal;
using Glitch9.IO.Networking.RESTApi;
using Glitch9.ScriptableObjects;
using System.Collections.Generic;
using System.IO;
using UnityEditor;
using UnityEngine;

namespace Glitch9.AIDevKit.Editor
{
    internal class AIDevKitSettingsProvider : ExtendedSettingsProvider<AIDevKitSettingsProvider, AIDevKitSettings>
    {
        private static readonly string kDefaultRuntimePath = Path.Combine(Application.persistentDataPath, "Generated");

        private static class Labels
        {
            internal static readonly GUIContent EnablePromptHistoryOnRuntime = new("Prompt History On Runtime",
                "If enabled, all generation requests will be saved in your 'PromptHistory.asset' file. If disabled, you need to call '.EnablePromptHistory()' with your GENTask to save the requests.");
            internal static readonly GUIContent OutputPath = new("Output Path",
                "The default path where the generated files will be saved. This is used for generated contents downloads, such as images, audio, and other assets.");
            internal static readonly GUIContent LogLevel = new("Log Level",
                "The log level determines the verbosity of the logs generated by the AIDevKit. You can choose to log different aspects of the requests and responses.");
            internal static readonly GUIContent DisplayCurrency = new("Display Currency",
                "The currency used to display the prices in the AIDevKit.");
        }


        protected static HashSet<string> Keywords { get; } = new()
        {
            "AI",
            "LLM",
            "GenAI",
            "Tools",
            "CodeGen",
        };

        private const int SPACE = 10;
        private const int LABEL_WIDTH = 240;


        [SettingsProvider]
        public static SettingsProvider CreateSettingsProvider()
        {
            AIDevKitSettingsProvider provider = new(AIDevKitEditor.Providers.BasePath, SettingsScope.User)
            {
                deactivateHandler = DeactivateHandler,
                keywords = Keywords
            };
            return provider;
        }

        private static void DeactivateHandler()
        {
            AIDevKitSettings.Instance.SaveAsset();
        }

        // Settings Properties ---------------------------------------------------------------
        private SerializedProperty defaultLLM;
        private SerializedProperty defaultIMG;
        private SerializedProperty defaultTTS;
        private SerializedProperty defaultSTT;
        private SerializedProperty defaultEMB;
        private SerializedProperty defaultMOD;
        private SerializedProperty outputPath;
        private SerializedProperty componentGenerator;
        private SerializedProperty scriptDebugger;
        private SerializedProperty logLevel;
        private SerializedProperty requestTimeout;
        private SerializedProperty promptHistoryOnRuntime;

        // Project Context -------------------------------------------------------------------
        private SerializedProperty projectContext;
        private SerializedProperty mainPlatform;
        private SerializedProperty languageTone;
        private SerializedProperty artStyle;
        private SerializedProperty gameGenre;
        private SerializedProperty gameTheme;
        private SerializedProperty description;
        private SerializedProperty is2D;
        private SerializedProperty isMultiplayer;
        private SerializedProperty isVR; // Not used in the settings, but can be added later if needed

        // Local Variables ---------------------------------------------------------------
        private readonly EPrefs<int> _savedLogLevel = new("AIDevKit.LogLevel", (int)RESTLogLevel.RequestEndpoint);


        public AIDevKitSettingsProvider(string path, SettingsScope scope = SettingsScope.User) : base(path, scope) { }

        protected override void InitializeSettings()
        {
            // Load the settings properties
            defaultLLM = serializedObject.FindProperty(nameof(defaultLLM));
            defaultIMG = serializedObject.FindProperty(nameof(defaultIMG));
            defaultTTS = serializedObject.FindProperty(nameof(defaultTTS));
            defaultSTT = serializedObject.FindProperty(nameof(defaultSTT));
            defaultEMB = serializedObject.FindProperty(nameof(defaultEMB));
            defaultMOD = serializedObject.FindProperty(nameof(defaultMOD));

            outputPath = serializedObject.FindProperty(nameof(outputPath));
            componentGenerator = serializedObject.FindProperty(nameof(componentGenerator));
            scriptDebugger = serializedObject.FindProperty(nameof(scriptDebugger));
            logLevel = serializedObject.FindProperty(nameof(logLevel));
            requestTimeout = serializedObject.FindProperty(nameof(requestTimeout));
            promptHistoryOnRuntime = serializedObject.FindProperty(nameof(promptHistoryOnRuntime));

            projectContext = serializedObject.FindProperty(nameof(projectContext));

            mainPlatform = projectContext.FindPropertyRelative(nameof(mainPlatform));
            languageTone = projectContext.FindPropertyRelative(nameof(languageTone));
            artStyle = projectContext.FindPropertyRelative(nameof(artStyle));
            gameGenre = projectContext.FindPropertyRelative(nameof(gameGenre));
            gameTheme = projectContext.FindPropertyRelative(nameof(gameTheme));
            description = projectContext.FindPropertyRelative(nameof(description));
            is2D = projectContext.FindPropertyRelative(nameof(is2D));
            isMultiplayer = projectContext.FindPropertyRelative(nameof(isMultiplayer));
            isVR = projectContext.FindPropertyRelative(nameof(isVR));


            if (!AIDevKitConfig.IsPro)
            {
                componentGenerator.boolValue = false;
                scriptDebugger.boolValue = false;
            }
        }

        protected override void DrawSettings()
        {
            EditorGUIUtility.labelWidth = LABEL_WIDTH;

            DrawDefaultModelApis();

            GUILayout.Space(SPACE);

            DrawGeneralSettings();

            GUILayout.Space(SPACE);

            DrawGenerationSettings();

            GUILayout.Space(SPACE);

            DrawProjectContext();

            GUILayout.Space(SPACE);

            DrawDescription();

            GUILayout.Space(SPACE);

            ExGUIPreset.TroubleShootings(AIDevKitEditor.OnlineDocUrl, EditorConfig.GithubSupportUrl);

            EditorGUIUtility.labelWidth = 0;
        }

        private void DrawDefaultModelApis()
        {
            ExGUILayout.BeginSection(GUIContents.DefaultModelsSectionTitle);
            {
                AIDevKitGUI.LLMPopup(defaultLLM, Api.All, GUIContents.DefaultLLM);
                AIDevKitGUI.IMGPopup(defaultIMG, Api.All, GUIContents.DefaultIMG);
                AIDevKitGUI.TTSPopup(defaultTTS, Api.All, GUIContents.DefaultTTS);
                AIDevKitGUI.STTPopup(defaultSTT, Api.All, GUIContents.DefaultSTT);
                AIDevKitGUI.EMBPopup(defaultEMB, Api.All, GUIContents.DefaultEMB);
                AIDevKitGUI.MODPopup(defaultMOD, Api.All, GUIContents.DefaultMOD);
            }
            ExGUILayout.EndSection();
        }

        private void DrawGeneralSettings()
        {
            ExGUILayout.BeginSection("General Settings");
            {
                EditorGUILayout.PropertyField(requestTimeout, new GUIContent("Request Timeout", "The timeout for the requests in seconds."));

                EditorGUI.BeginDisabledGroup(AIDevKitDebug.kDebugMode.Value);
                {
                    EditorGUILayout.PropertyField(logLevel, Labels.LogLevel);
                }
                EditorGUI.EndDisabledGroup();

                AIDevKitEditor.CurrencyCode = ExGUILayout.ResettableEnumPopup(Labels.DisplayCurrency, AIDevKitEditor.CurrencyCode, CurrencyCode.USD);

                bool newDebugMode = EditorGUILayout.Toggle("Debug Mode", AIDevKitDebug.kDebugMode.Value);

                if (newDebugMode != AIDevKitDebug.kDebugMode.Value)
                {
                    AIDevKitDebug.kDebugMode.Value = newDebugMode;

                    if (newDebugMode)
                    {
                        AIDevKitDebug.kDebugMode.Value = true;
                        _savedLogLevel.Value = logLevel.intValue;
                        _savedLogLevel.Save();
                        logLevel.intValue = (int)RESTLogLevel.All;
                        logLevel.serializedObject.ApplyModifiedProperties();
                    }
                    else
                    {
                        AIDevKitDebug.kDebugMode.Value = false;
                        logLevel.intValue = _savedLogLevel.Value;
                        logLevel.serializedObject.ApplyModifiedProperties();
                    }
                }
            }
            ExGUILayout.EndSection();
        }

        private void DrawGenerationSettings()
        {
            ExGUILayout.BeginSection("Generation Settings");
            {
                string runtimePath = ExGUILayout.PathField(Labels.OutputPath, outputPath.stringValue, Application.persistentDataPath, kDefaultRuntimePath);
                //string editorPath = ExGUILayout.PathField(Labels.EditorPath, editorOutputPath.stringValue, Application.dataPath, kDefaultEditorPath);

                EditorGUILayout.PropertyField(promptHistoryOnRuntime, Labels.EnablePromptHistoryOnRuntime);

                EditorGUI.BeginDisabledGroup(!AIDevKitConfig.IsPro);
                {
                    EditorGUILayout.PropertyField(componentGenerator, new GUIContent("Component Generator (Pro Only)",
                        "The Component Generator adds a 'Generate Component' button under 'Add Component' in the Inspector window." +
                        "This button will generate a new component script based on your prompt."));

                    EditorGUILayout.PropertyField(scriptDebugger, new GUIContent("Script Debugger (Pro Only)",
                        "The Script Debugger adds a 'Debug Script' button under script preview in the Inspector window." +
                        "This button will generate a new script based on your prompt and debug it."));

                    if (!componentGenerator.boolValue)
                    {
                        EditorGUILayout.HelpBox("The Component Generator is disabled. Enable it to see the 'Generate Component' button in the Inspector window.", MessageType.None);
                    }

                    if (!scriptDebugger.boolValue)
                    {
                        EditorGUILayout.HelpBox("The Script Debugger is disabled. Enable it to see the 'Debug Script' button in the Inspector window.", MessageType.None);
                    }
                }
                EditorGUI.EndDisabledGroup();

                if (runtimePath != outputPath.stringValue)
                {
                    // check if the path is relative to the persistent data path
                    if (!Path.IsPathRooted(runtimePath) && !runtimePath.StartsWith(Application.persistentDataPath))
                    {
                        Debug.LogWarning($"The runtime path '{runtimePath}' is not relative to the persistent data path '{Application.persistentDataPath}'. " +
                                         "Please enter a valid path relative to the persistent data path.");
                        outputPath.stringValue = kDefaultRuntimePath;
                    }
                    else
                    {
                        outputPath.stringValue = runtimePath;
                    }

                    outputPath.serializedObject.ApplyModifiedProperties();
                }

                // if (editorPath != editorOutputPath.stringValue)
                // {
                //     editorOutputPath.stringValue = editorPath;
                //     editorOutputPath.serializedObject.ApplyModifiedProperties();
                // }
            }
            ExGUILayout.EndSection();
        }

        private void DrawProjectContext()
        {
            ExGUILayout.BeginSection("Project Context");
            {
                EditorGUILayout.PropertyField(mainPlatform, new GUIContent("Main Platform", "The default platform for the project."));
                EditorGUILayout.PropertyField(languageTone, new GUIContent("Language Tone", "The tone of the language used in the project."));
                EditorGUILayout.PropertyField(artStyle, new GUIContent("Art Style", "The art style of the project. Select all that apply."));
                EditorGUILayout.PropertyField(gameGenre, new GUIContent("Game Genre", "The genre of this game. Select all that apply."));
                EditorGUILayout.PropertyField(gameTheme, new GUIContent("Game Theme", "The lore setting of the game."));
                EditorGUILayout.PropertyField(is2D, new GUIContent("Is 2D", "Is the game a 2D game?"));
                EditorGUILayout.PropertyField(isVR, new GUIContent("Is VR", "Is the game a VR game?"));
                EditorGUILayout.PropertyField(isMultiplayer, new GUIContent("Is Multiplayer", "Is the game a multiplayer game?"));
            }
            ExGUILayout.EndSection();
        }

        private void DrawDescription()
        {
            ExGUILayout.BeginSection("Project Description");
            {
                const float height = 80f;

                // draw a big text field for the description
                string newDescription = EditorGUILayout.TextArea(description.stringValue, ExStyles.textField, GUILayout.Height(height));
                if (newDescription != description.stringValue) description.stringValue = newDescription;
            }
            ExGUILayout.EndSection();
        }
    }
}