using Glitch9.IO.Networking.RESTApi;
using Newtonsoft.Json;
using System.Collections.Generic;
using Glitch9.IO.Files;
using System;

namespace Glitch9.AIDevKit.Google
{
    public enum GoogleFileSource
    {
        /// <summary>
        /// The default value. This value is used if the source is omitted.
        /// </summary>
        [ApiEnum("SOURCE_UNSPECIFIED")] None,

        /// <summary>
        /// Indicates the file is uploaded by the user.
        /// </summary>
        [ApiEnum("UPLOADED")] Uploaded,

        /// <summary>
        /// Indicates the file is generated by Google.
        /// </summary>
        [ApiEnum("GENERATED")] Generated
    }

    public class GoogleFileUploadRequest : IMultipartFormRequest
    {
        [JsonProperty("file")] public IFile File { get; set; }
        [JsonProperty("metadata")] public GoogleFileUploadMetadata Metadata { get; set; }
    }

    public class GoogleFileUploadMetadata
    {
        /// <summary>
        /// Immutable. Identifier. 
        /// <para>
        /// The <see cref="GoogleFile"/> resource name. The ID (name excluding the "files/" prefix) can contain up to 40 characters 
        /// that are lowercase alphanumeric or dashes (-). 
        /// </para>
        /// <para>
        /// The ID cannot start or end with a dash. 
        /// If the name is empty on create, a unique name will be generated. 
        /// </para>
        /// <para>Example: files/123-456</para>
        /// </summary>
        [JsonProperty("name")] public string Id { get; set; }

        /// <summary>
        /// Optional. 
        /// <para>
        /// The human-readable display name for the <see cref="GoogleFile"/>. 
        /// The display name must be no more than 512 characters in length, 
        /// including spaces. Example: "Welcome Image"
        /// </para>
        /// </summary>
        [JsonProperty("displayName")] public string Name { get; set; }
    }

    /// <summary>
    /// A file uploaded to the API.
    /// </summary>
    public class GoogleFile : IApiFile
    {
        /// <summary>
        /// Immutable. Identifier. 
        /// <para>
        /// The <see cref="GoogleFile"/> resource name. The ID (name excluding the "files/" prefix) can contain up to 40 characters 
        /// that are lowercase alphanumeric or dashes (-). 
        /// </para>
        /// <para>
        /// The ID cannot start or end with a dash. 
        /// If the name is empty on create, a unique name will be generated. 
        /// </para>
        /// <para>Example: files/123-456</para>
        /// </summary>
        [JsonProperty("name")] public string Id { get; set; }

        /// <summary>
        /// Optional. 
        /// <para>
        /// The human-readable display name for the <see cref="GoogleFile"/>. 
        /// The display name must be no more than 512 characters in length, 
        /// including spaces. Example: "Welcome Image"
        /// </para>
        /// </summary>
        [JsonProperty("displayName")] public string Name { get; set; }

        /// <summary>
        /// Output only. 
        /// <para>MIME type of the <see cref="GoogleFile"/>.</para>
        /// </summary>
        [JsonProperty("mimeType")] public string MimeTypeAsString { get; set; }
        [JsonIgnore] public MIMEType MimeType => MIMETypeUtil.Parse(MimeTypeAsString);

        /// <summary>
        /// Output only. 
        /// <para>Size of the <see cref="GoogleFile"/> in bytes.</para>
        /// </summary>
        [JsonProperty("sizeBytes")] public int ByteSize { get; set; }

        /// <summary>
        /// Output only.
        /// <para>The timestamp of when the <see cref="GoogleFile"/> was created.</para>
        /// </summary>
        [JsonProperty("createTime")] public ZuluTime? CreateTime { get; set; }

        /// <summary>
        /// Output only. 
        /// <para>The timestamp of when the <see cref="GoogleFile"/> was last updated.</para>
        /// </summary>
        [JsonProperty("updateTime")] public ZuluTime? UpdateTime { get; set; }

        /// <summary>
        /// Output only. 
        /// <para>
        /// The timestamp of when the <see cref="GoogleFile"/> will be deleted. 
        /// Only set if the <see cref="GoogleFile"/> is scheduled to expire.
        /// </para>
        /// </summary>
        [JsonProperty("expirationTime")] public ZuluTime? ExpirationTime { get; set; }

        /// <summary>
        /// Output only. 
        /// <para>SHA-256 hash of the uploaded bytes.</para>
        /// </summary>
        /// <remarks>A base64-encoded string.</remarks>
        [JsonProperty("sha256Hash")] public string Sha256Hash { get; set; }

        /// <summary>
        /// Output only. 
        /// <para>The uri of the <see cref="GoogleFile"/>.</para>
        /// </summary>
        [JsonProperty("uri")] public string Uri { get; set; }

        [JsonProperty("downloadUri")] public string DownloadUri { get; set; }

        [JsonProperty("source")] public GoogleFileSource? Source { get; set; }

        /// <summary>
        /// Output only. 
        /// <para>Processing state of the <see cref="GoogleFile"/>.</para>
        /// </summary>
        [JsonProperty("state")] public FileState State { get; set; }

        /// <summary>
        /// Output only. 
        /// <para>Error status if <see cref="GoogleFile"/> processing failed.</para>
        /// </summary>
        [JsonProperty("error")] public Status Error { get; set; }

        /// <summary>
        /// Output only.
        /// <para>Metadata for a video.</para>
        /// </summary>
        [JsonProperty("videoMetadata")] public VideoMetadata VideoMetadata { get; set; }

        [JsonIgnore] public Api Api => Api.Google;
        [JsonIgnore] public UnixTime CreatedAt => _createdAt ??= new UnixTime(CreateTime?.DateTime ?? DateTime.MinValue);
        [JsonIgnore] public UnixTime ExpiresAt => _expiresAt ??= new UnixTime(ExpirationTime?.DateTime ?? DateTime.MinValue);
        [JsonIgnore] private UnixTime? _createdAt, _expiresAt;

        public Metadata BuildMetadata()
        {
            Dictionary<string, string> metadata = new()
            {
                { "State", State.ToString() },
            };

            if (UpdateTime != null) metadata.Add("Update Time", UpdateTime?.DateTime.ToString("yyyy-MM-dd HH:mm:ss"));
            if (Error != null)
            {
                metadata.Add("Error Code", Error.Code.ToString());
                if (!string.IsNullOrEmpty(Error.Message)) metadata.Add("Error Message", Error.Message);
                if (Error.Details.IsNotNullOrEmpty())
                {
                    foreach (var kvp in Error.Details)
                    {
                        metadata.Add(kvp.Key, kvp.Value);
                    }
                }
            }

            if (!string.IsNullOrEmpty(Sha256Hash)) metadata.Add("SHA-256 Hash", Sha256Hash);
            if (!string.IsNullOrEmpty(VideoMetadata?.VideoDuration)) metadata.Add("Video Duration", VideoMetadata.VideoDuration);
            if (Source != null) metadata.Add("Source", Source.ToString());
            if (!string.IsNullOrEmpty(DownloadUri)) metadata.Add("Download Uri", DownloadUri);

            return new Metadata(metadata);
        }
    }

    /// <summary>
    /// States for the lifecycle of a File.
    /// </summary>
    public enum FileState
    {
        /// <summary>
        /// The default value. This value is used if the state is omitted.
        /// </summary>
        [ApiEnum("STATE_UNSPECIFIED")] None,

        /// <summary>
        /// File is being processed and cannot be used for inference yet.
        /// </summary>
        [ApiEnum("PROCESSING")] Processing,

        /// <summary>
        /// File is processed and available for inference.
        /// </summary>
        [ApiEnum("ACTIVE")] Active,

        /// <summary>
        /// File failed processing.
        /// </summary>
        [ApiEnum("FAILED")] Failed
    }

    /// <summary>
    /// The Status type defines a logical error model that is suitable for different programming environments, 
    /// including REST APIs and RPC APIs. It is used by gRPC. 
    /// Each Status message contains three pieces of data: error code, error message, and error details.
    /// </summary>
    /// <remarks>
    /// You can find out more about this error model and how to work with it in the <see href="https://cloud.google.com/apis/design/errors"> API Design Guide</see>.
    /// </remarks>
    public class Status
    {
        /* Json Representation
        {
            "code": integer,
            "message": string,
            "details": [
                {
                "@type": string,
                field1: ...,
                ...
                }
            ]
        }
        */

        /// <summary>
        /// The status code, which should be an enum value of google.rpc.Code.
        /// </summary>
        [JsonProperty("code")] public int Code { get; set; }

        /// <summary>
        /// A developer-facing error message, which should be in English. 
        /// Any user-facing error message should be localized and sent in the 
        /// <see href="https://ai.google.dev/api/rest/Shared.Types/Operation#Status.FIELDS.details"> google.rpc.Status.details</see> field, 
        /// or localized by the client.
        /// </summary>
        [JsonProperty("message")] public string Message { get; set; }

        /// <summary>
        /// A list of messages that carry the error details. There is a common set of message types for APIs to use.
        /// An object containing fields of an arbitrary type. An additional field "@type" contains a URI identifying the type. 
        /// <para>Example: { "id": 1234, "@type": "types.example.com/standard/id" }.</para>
        /// </summary>
        [JsonProperty("details")] public Dictionary<string, string> Details { get; set; }

        public override string ToString() => $"Code: {Code}, Message: {Message}, Details: {string.Join(", ", Details)}";
    }

    /// <summary>
    /// Metadata for a video File.
    /// </summary>
    public class VideoMetadata
    {
        /* Json Representation
        {
            "videoDuration": string
        }
        */

        /// <summary>
        /// Duration of the video.
        /// </summary>
        /// <remarks>
        /// A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
        /// </remarks>
        [JsonProperty("videoDuration")] public string VideoDuration { get; set; }
    }
}