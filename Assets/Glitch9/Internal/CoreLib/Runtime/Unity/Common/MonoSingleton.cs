using UnityEngine;
using UnityEngine.SceneManagement;
// ReSharper disable StaticMemberInGenericType

namespace Glitch9
{
    /// <summary>
    /// A singleton implementation for MonoBehaviour, ensuring only a single instance
    /// of MonoBehaviour exists in the scene, and it persists across scene loads.
    /// </summary>
    /// <typeparam name="T">Type of the subclass.</typeparam>
    [DefaultExecutionOrder(-1000)]
    public class MonoSingleton<T> : MonoBehaviour where T : MonoSingleton<T>
    {
        private const bool AUTO_CREATE = false;

        private static T _instance;
        private static bool _isInstantiating = false;
        private static bool _isQuitting = false;

        [SerializeField] private bool dontDestroyOnLoad = false;

        /// <summary>
        /// Provides a global access point to the singleton instance.
        /// </summary>
        public static T Instance
        {
            get
            {
                if (_isQuitting)
                {
                    Debug.LogWarning("Application is quitting. The instance will return null.");
                    return null;
                }

                if (_instance == null && !_isInstantiating)
                {
                    CreateSingletonInstance();
                }

                return _instance;
            }
        }

        protected virtual void Awake()
        {
            if (_instance == null)
            {
                CreateSingletonInstance();
            }
        }

        private static void CreateSingletonInstance()
        {
            _isInstantiating = true;
            _instance = UnityCompat.FindFirstObjectByType<T>() ?? CreateNewSingleton();
            _isInstantiating = false;

            if (_instance != null && _instance.dontDestroyOnLoad && Application.isPlaying)
            {
                MoveToRootAndDontDestroyOnLoad(_instance.gameObject);
            }
        }

        private static T CreateNewSingleton()
        {
            if (!AUTO_CREATE)
            {
                Debug.LogWarning($"{typeof(T).Name} is required in the scene but not found.");
                return null;
            }

            //var singletonObject = new GameObject($"{typeof(T).Name}(AutoGenerated)");
            //return singletonObject.AddComponent<T>();
        }

        private static void MoveToRootAndDontDestroyOnLoad(GameObject obj)
        {
            if (obj.transform.parent != null)
            {
                obj.transform.SetParent(null);
            }
            DontDestroyOnLoad(obj);
        }

        protected virtual void OnEnable()
        {
            SceneManager.sceneLoaded += OnSceneLoaded;
        }

        protected virtual void OnDisable()
        {
            SceneManager.sceneLoaded -= OnSceneLoaded;
        }

        private void OnSceneLoaded(Scene scene, LoadSceneMode mode)
        {
            if (!dontDestroyOnLoad)
            {
                _instance = null;
            }
        }

        protected virtual void OnApplicationQuit()
        {
            _isQuitting = true;
        }
    }
}
